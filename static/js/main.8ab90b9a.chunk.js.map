{"version":3,"sources":["components/SearchBox.component.jsx","components/Scroll.component.jsx","components/ErrorBoundary.component.jsx","components/Card.component.jsx","components/CardList.component.jsx","containers/App.jsx","serviceWorker.js","index.js"],"names":["SearchBox","searchfield","searchChange","className","type","placeholder","value","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","Card","robot","name","email","src","alt","CardList","robots","map","key","id","App","onSearchChange","e","target","fetch","req","json","res","filteredRobots","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"6PAUeA,G,YARG,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,YAAYC,EAAiB,EAAjBA,aAC5B,OACI,yBAAKC,UAAU,OACX,2BAAOC,KAAK,SAASC,YAAY,eAAeF,UAAU,mCAAmCG,MAAOL,EAAaM,SAAUL,OCOxHM,EAVA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAASC,OAAQ,kBAAkBC,OAAQ,UAE/DJ,EAAMK,WCkBHC,E,kDArBX,WAAYN,GACX,IAAD,8BACI,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHlB,E,8DAMkBC,EAAMC,GAEpBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAGG,KAAKJ,MAAMC,SAEH,wDAEJG,KAAKX,MAAMK,a,GAlBEQ,aCYbC,EAZF,SAAC,GAAyB,IAAD,IAAvBC,MAAOC,EAAgB,EAAhBA,KAAKC,EAAW,EAAXA,MACvB,OACI,yBAAKvB,UAAU,uDACX,yBAAKwB,IAAG,+BAA0BF,EAA1B,YAA0CG,IAAG,gBAAWH,KAChE,6BACI,4BAAKA,GACL,2BAAIC,MCOLG,EAZE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OACf,OACI,6BAEQA,EAAOC,KAAI,SAAAP,GACP,OAAO,kBAAC,EAAD,CAAMQ,IAAKR,EAAMS,GAAIA,GAAIT,EAAMS,GAAIT,MAAOA,SC6CtDU,E,kDA1Cb,aACC,IAAD,8BACE,gBAaFC,eAAiB,SAACC,GAChB,EAAKf,SAAS,CAACpB,YAAamC,EAAEC,OAAO/B,SAbrC,EAAKU,MAAQ,CACXc,OAAS,GACT7B,YAAa,IAJjB,E,kMAUoBqC,MAAM,8C,cAAlBC,E,gBACYA,EAAIC,O,OAAhBC,E,OACNrB,KAAKC,SAAS,CAACS,OAAQW,I,qIAKf,IAAD,EACsBrB,KAAKJ,MAA3Bc,EADA,EACAA,OAAO7B,EADP,EACOA,YACRyC,EAAiBZ,EAAOa,QAAO,SAAAnB,GACnC,OAAOA,EAAMC,KAAKmB,cAAcC,SAAS5C,EAAY2C,kBAEvD,OAAId,EAAOgB,OAMT,yBAAK3C,UAAU,MACX,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWD,aAAckB,KAAKe,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUL,OAAQY,OATlB,8C,GA1BIpB,aCEEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7C,GACL8C,QAAQ9C,MAAMA,EAAM+C,a","file":"static/js/main.8ab90b9a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBox = ({searchfield,searchChange})=> {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input type=\"search\" placeholder=\"Search robot\" className=\"pa3 ba b--green bg-lightest-blue\" value={searchfield} onChange={searchChange}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props)=> {\r\n    return (\r\n        <div style={{overflowY: 'scroll',border: '1px solid black',height: '800px'}}>\r\n        {\r\n            props.children\r\n        }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        };\r\n    }\r\n    componentDidCatch(error,info)\r\n    {\r\n        this.setState({hasError: true});\r\n    }\r\n    render()\r\n    {\r\n        if(this.state.hasError)\r\n        {\r\n            return <h2>Oooops that is not good!</h2>\r\n        }   \r\n        return this.props.children;\r\n    }\r\n};\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\n\r\nconst Card = ({robot:{name,email}})=> { \r\n    return (\r\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc\">\r\n            <img src={`https://robohash.org/${name}?200x200`} alt={`robot-${name}`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card.component';\r\n\r\nconst CardList = ({robots})=> {   \r\n    return (\r\n        <div>\r\n            {\r\n                robots.map(robot=>{\r\n                    return <Card key={robot.id} id={robot.id} robot={robot}/>\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardList;\r\n","import React,{Component} from 'react';\nimport './App.sass';\nimport 'tachyons';\n//Components\nimport SearchBox from '../components/SearchBox.component';\nimport Scroll from '../components/Scroll.component';\nimport ErrorBoundary from '../components/ErrorBoundary.component';\nimport CardList from '../components/CardList.component';\n\n\nclass App extends Component {\n  constructor()\n  {\n    super();\n    this.state = {\n      robots : [],\n      searchfield: ''\n    };\n  }\n  async componentDidMount()\n  {\n\n    const req = await fetch('https://jsonplaceholder.typicode.com/users');\n    const res = await req.json();\n    this.setState({robots: res});\n  }\n  onSearchChange = (e)=>{\n    this.setState({searchfield: e.target.value});\n  }\n  render() {    \n    const {robots,searchfield} = this.state;\n    const filteredRobots = robots.filter(robot=>{\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    });    \n    if(!robots.length)\n    {\n      return (<h1>Loading...</h1>);\n    }\n   \n    return (\n      <div className=\"tc\">\n          <h1 className=\"f1\">RoboFreunden</h1>\n          <SearchBox searchChange={this.onSearchChange}/>\n          <Scroll>\n            <ErrorBoundary>\n              <CardList robots={filteredRobots}/>\n            </ErrorBoundary>\n          </Scroll>\n        </div>\n    );\n  }\n}\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}