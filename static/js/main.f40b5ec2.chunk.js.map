{"version":3,"sources":["serviceWorker.js","reducers.js","components/SearchBox.component.jsx","components/Scroll.component.jsx","components/ErrorBoundary.component.jsx","components/Card.component.jsx","components/CardList.component.jsx","components/Header.jsx","containers/App.jsx","actions.js","constants.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","initialStateSearch","searchField","initialStateRobots","robots","isPending","SearchBox","searchfield","searchChange","className","aria-label","type","placeholder","value","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","hasError","info","this","setState","Component","Card","robot","name","email","src","alt","CardList","map","key","id","Header","App","onRequestRobots","document","title","process","onSearchChange","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","e","payload","target","fetch","res","json","data","err","rootReducers","createLogger","combineReducers","action","middlewares","thunkMiddleware","store","createStore","applyMiddleware","ReactDOM","render","getElementById","URL","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"2PAYMA,G,MAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,yCCzF3DC,EAAqB,CACvBC,YAAa,IAGXC,EAAqB,CACvBC,OAAQ,GACRC,WAAW,EACXL,MAAO,I,4BCGIM,G,YAfG,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,YAAYC,EAAiB,EAAjBA,aAC5B,OACI,yBAAKC,UAAU,OACX,2BACIC,aAAW,gBACXC,KAAK,SACLC,YAAY,eACZH,UAAU,mCACVI,MAAON,EACPO,SAAUN,OCCXO,EAVA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAASC,OAAQ,kBAAkBC,OAAQ,UAE/DJ,EAAMK,WCkBHC,E,kDArBX,WAAYN,GACX,IAAD,8BACI,cAAMA,IACDvB,MAAQ,CACT8B,UAAU,GAHlB,E,8DAMkBvB,EAAMwB,GAEpBC,KAAKC,SAAS,CAACH,UAAU,M,+BAIzB,OAAGE,KAAKhC,MAAM8B,SAEH,wDAEJE,KAAKT,MAAMK,a,GAlBEM,aCYbC,EAZF,SAAC,GAAyB,IAAD,IAAvBC,MAAOC,EAAgB,EAAhBA,KAAKC,EAAW,EAAXA,MACvB,OACI,yBAAKtB,UAAU,uDACX,yBAAKuB,IAAG,+BAA0BF,EAA1B,iBAA+CG,IAAG,gBAAWH,KACrE,6BACI,4BAAKA,GACL,2BAAIC,MCOLG,EAZE,SAAC,GAAa,IAAZ9B,EAAW,EAAXA,OACf,OACI,6BAEQA,EAAO+B,KAAI,SAAAN,GACP,OAAO,kBAAC,EAAD,CAAMO,IAAKP,EAAMQ,GAAIA,GAAIR,EAAMQ,GAAIR,MAAOA,SCWtDS,G,6KARP,OADA3C,QAAQC,IAAI,UAER,yBAAKa,UAAU,UACX,wBAAIA,UAAU,MAAd,qB,GATKkB,cCSfY,E,kLAGFd,KAAKT,MAAMwB,kBACXC,SAASC,MAAQC,iB,+BAET,IAAD,EACgDlB,KAAKT,MAArDd,EADA,EACAA,YAAY0C,EADZ,EACYA,eAAgBxC,EAD5B,EAC4BA,OAAOC,EADnC,EACmCA,UACpCwC,EAAiBzC,EAAO0C,QAAO,SAAAjB,GACnC,OAAOA,EAAMC,KAAKiB,cAAcC,SAAS9C,EAAY6C,kBAEvD,OAAG1C,EAEO,0CAGR,yBAAKI,UAAU,MACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWD,aAAcoC,IACzB,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUxC,OAAQyC,W,GArBdlB,aAwCHsB,eAXS,SAACxD,GAAD,MAAU,CAChCS,YAAaT,EAAMyD,aAAahD,YAChCE,OAAQX,EAAM0D,cAAc/C,OAC5BC,UAAWZ,EAAM0D,cAAc9C,UAC/BL,MAAOP,EAAM0D,cAAcnD,UAEF,SAACoD,GAAD,MAAa,CACtCR,eAAgB,SAAAS,GAAC,OAAED,ECxCkB,CACnCzC,KCV+B,sBDW/B2C,QDsCyCD,EAAEE,OAAO1C,SACpD2B,gBAAiB,kBAAKY,GCrCU,SAAAA,GAC9BA,EAAS,CAACzC,KCbwB,2BDclC6C,MAAM,8CACLrE,MAAK,SAAAsE,GAAG,OAAEA,EAAIC,UACdvE,MAAK,SAAAwE,GAAI,OAAIP,EAAS,CAACzC,KCfU,yBDemB2C,QAASK,OAC7D5D,OAAM,SAAA6D,GAAG,OAAIR,EAAS,CAACzC,KCfS,wBDeoB2C,QAASM,cDmCnDX,CAA4CV,GGzCrDsB,GADSC,yBACMC,YAAgB,CAACZ,cVkBT,WAAuC,IAAtC1D,EAAqC,uDAA/BU,EAAmB6D,EAAY,uDAAL,GAC1D,OAAOA,EAAOrD,MAEV,IShC8B,yBTiC1B,OAAO,eACAlB,EADP,CAEIY,WAAW,IAEnB,ISpC8B,yBTqC1B,OAAO,eACAZ,EADP,CAEIW,OAAQ4D,EAAOV,QACfjD,WAAW,IAEnB,ISzC6B,wBT0CzB,OAAO,eACAZ,EADP,CAEIO,MAAOgE,EAAOV,QACdjD,WAAW,IAGnB,QACI,OAAOZ,IUxCkCyD,aVKzB,WAAuC,IAAtCzD,EAAqC,uDAA/BQ,EAAmB+D,EAAY,uDAAL,GACzD,OAAOA,EAAOrD,MAEV,ISpB2B,sBTqBvB,OAAO,eACAlB,EADP,CAEIS,YAAa8D,EAAOV,UAE5B,QACI,OAAO7D,OUbbwE,EAAc,CAACC,KAIrB,IAAMC,EAAQC,YAAYP,EAAcQ,IAAe,WAAf,EAAmBJ,IAE3DK,IAASC,OACT,kBAAC,IAAD,CAAUJ,MAAOA,GACb,kBAAC,EAAD,OAEH1B,SAAS+B,eAAe,SXDlB,SAAkBzF,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIyF,IAAI9B,gBAAwBlE,OAAOC,SAASgG,MACpDC,SAAWlG,OAAOC,SAASiG,OAIvC,OAGFlG,OAAOmG,iBAAiB,QAAQ,WAC9B,IAAM9F,EAAK,UAAM6D,gBAAN,sBAEPpE,IAgEV,SAAiCO,EAAOC,GAEtCyE,MAAM1E,EAAO,CACX+F,QAAS,CAAE,iBAAkB,YAE5B1F,MAAK,SAAA2F,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ClG,UAAUC,cAAckG,MAAMhG,MAAK,SAAAC,GACjCA,EAAagG,aAAajG,MAAK,WAC7BV,OAAOC,SAAS2G,eAKpBxG,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFA0F,CAAwBxG,EAAOC,GAI/BC,UAAUC,cAAckG,MAAMhG,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OWzB/BE,K","file":"static/js/main.f40b5ec2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED,\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n};\r\n\r\nconst initialStateRobots = {\r\n    robots: [],\r\n    isPending: false,\r\n    error: ''\r\n};\r\n\r\nexport const searchRobots = (state=initialStateSearch,action={})=>{\r\n    switch(action.type)\r\n    {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return {\r\n                ...state,\r\n                searchField: action.payload\r\n            }       \r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const requestRobots = (state=initialStateRobots,action={})=>{\r\n    switch(action.type)\r\n    {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return {\r\n                ...state,\r\n                isPending: true\r\n            };\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                robots: action.payload,\r\n                isPending: false\r\n            };\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return {\r\n                ...state,\r\n                error: action.payload,\r\n                isPending: false,\r\n\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield,searchChange})=> {      \r\n    return (\r\n        <div className=\"pa2\">\r\n            <input \r\n                aria-label=\"Search Robots\"\r\n                type=\"search\" \r\n                placeholder=\"Search robot\" \r\n                className=\"pa3 ba b--green bg-lightest-blue\" \r\n                value={searchfield} \r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props)=> {\r\n    return (\r\n        <div style={{overflowY: 'scroll',border: '1px solid black',height: '800px'}}>\r\n        {\r\n            props.children\r\n        }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        };\r\n    }\r\n    componentDidCatch(error,info)\r\n    {\r\n        this.setState({hasError: true});\r\n    }\r\n    render()\r\n    {\r\n        if(this.state.hasError)\r\n        {\r\n            return <h2>Oooops that is not good!</h2>\r\n        }   \r\n        return this.props.children;\r\n    }\r\n};\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\n\r\nconst Card = ({robot:{name,email}})=> { \r\n    return (\r\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc\">\r\n            <img src={`https://robohash.org/${name}?size=200x200`} alt={`robot-${name}`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card.component';\r\n\r\nconst CardList = ({robots})=> {       \r\n    return (\r\n        <div>\r\n            {\r\n                robots.map(robot=>{\r\n                    return <Card key={robot.id} id={robot.id} robot={robot}/>\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardList;\r\n","import React, { Component } from 'react';\r\n\r\nimport './Header.sass';\r\n\r\nclass Header extends Component {\r\n    // shouldComponentUpdate(nextProps,nextState)\r\n    // {\r\n    //     return false;\r\n    // }\r\n    render() {\r\n        console.log('Header');        \r\n        return (\r\n            <div className=\"header\">\r\n                <h1 className=\"f1\">RoboFreunden</h1>                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","import React,{Component} from 'react';\nimport './App.sass';\nimport 'tachyons';\n//Components\nimport SearchBox from '../components/SearchBox.component';\nimport Scroll from '../components/Scroll.component';\nimport ErrorBoundary from '../components/ErrorBoundary.component';\nimport CardList from '../components/CardList.component';\n\nimport {setSearchField,requestRobots} from '../actions';\nimport {connect} from 'react-redux';\nimport Header from '../components/Header';\n\nclass App extends Component {  \n  componentDidMount()\n  {\n    this.props.onRequestRobots();\n    document.title = process.env.REACT_APP_PAGE_TITLE_ONE;        \n  }  \n  render() {\n    const {searchField,onSearchChange, robots,isPending} = this.props;\n    const filteredRobots = robots.filter(robot=>{\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });    \n    if(isPending)\n    {\n      return (<h1>LOADING...</h1>);\n    }   \n    return (\n      <div className=\"tc\">\n          <Header />   \n          <SearchBox searchChange={onSearchChange}/>\n          <Scroll>\n            <ErrorBoundary>\n              <CardList robots={filteredRobots}/>\n            </ErrorBoundary>\n          </Scroll>          \n        </div>\n    );\n  }\n}\n \nconst mapStateToProps = (state)=>({\n  searchField: state.searchRobots.searchField,\n  robots: state.requestRobots.robots,\n  isPending: state.requestRobots.isPending,\n  error: state.requestRobots.error\n});\nconst mapDispatchToProps = (dispatch)=>({\n  onSearchChange: e=>dispatch(setSearchField(e.target.value)),\n  onRequestRobots: ()=> dispatch(requestRobots())\n});\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED,\r\n} from './constants';\r\n\r\n\r\n\r\nexport const setSearchField = text => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n});\r\nexport const requestRobots = ()=> dispatch =>{\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(res=>res.json())\r\n    .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS,payload: data}))\r\n    .catch(err => dispatch({type: REQUEST_ROBOTS_FAILED, payload: err}));\r\n};","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport { requestRobots, searchRobots } from './reducers'\nimport App from './containers/App';\n\nconst logger = createLogger();\nconst rootReducers = combineReducers({requestRobots, searchRobots});\nconst middlewares = [thunkMiddleware];\nif (process.env.NODE_ENV === 'development') {\n    middlewares.push(logger);\n  }\nconst store = createStore(rootReducers, applyMiddleware(...middlewares));\n\nReactDOM.render(\n<Provider store={store}>\n    <App/>\n</Provider>\n,document.getElementById('root'));\n\nserviceWorker.register();"],"sourceRoot":""}